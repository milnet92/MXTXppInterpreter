<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExceptionDefaultSwitchStmt" xml:space="preserve">
    <value>Default part must be the last case in switch statement.</value>
  </data>
  <data name="ExceptionExpressionIDisposable" xml:space="preserve">
    <value>Expression type must implement IDisposable.</value>
  </data>
  <data name="ExceptionImplicitConversion" xml:space="preserve">
    <value>Cannot implicitly convert from type '{0}' to type '{1}'.</value>
  </data>
  <data name="ExceptionInitializationUnknown" xml:space="preserve">
    <value>Cannot determine type from initialization.</value>
  </data>
  <data name="ExceptionInLikeNotInQuery" xml:space="preserve">
    <value>In and Like statements can only be used in queries.</value>
  </data>
  <data name="ExceptionInNotContainer" xml:space="preserve">
    <value>In statement can only be compared to a container variable.</value>
  </data>
  <data name="ExceptionInvalidCatchExpr" xml:space="preserve">
    <value>Invalid catch exception type expression.</value>
  </data>
  <data name="ExceptionInvalidExceptionEnum" xml:space="preserve">
    <value>Invalid Exception enum</value>
  </data>
  <data name="ExceptionInvalidSyntax" xml:space="preserve">
    <value>Invalid syntax.</value>
  </data>
  <data name="ExceptionInvalidUsing" xml:space="preserve">
    <value>Invalid using expression.</value>
  </data>
  <data name="ExceptionIsInQuery" xml:space="preserve">
    <value>Is statatement cannot be used in queries</value>
  </data>
  <data name="ExceptionLeaveFinally" xml:space="preserve">
    <value>Control cannot leave a finally block.</value>
  </data>
  <data name="ExceptionMultiDefaultSwitchStmt" xml:space="preserve">
    <value>Switch statements may not have multie default parts.</value>
  </data>
  <data name="ExceptionNotExceptionMember" xml:space="preserve">
    <value>'{0}' is not a member of Exception enum.</value>
  </data>
  <data name="ExceptionRefTypeContainer" xml:space="preserve">
    <value>Instances of type '{0}' cannot be added to a container.</value>
  </data>
  <data name="ExceptionRetryNotInCatch" xml:space="preserve">
    <value>Retry statement can only be used within a catch statement.</value>
  </data>
  <data name="ExceptionReturnOutOfFunction" xml:space="preserve">
    <value>Return statement can only be used inside function declarations.</value>
  </data>
  <data name="ExceptionTokenExpected" xml:space="preserve">
    <value>Syntax error: {0} expected.</value>
  </data>
  <data name="ExceptionTokenWasNotExpected" xml:space="preserve">
    <value>Syntax error. Token {0} was not expected.</value>
  </data>
  <data name="ExceptionTypeCannotBeNull" xml:space="preserve">
    <value>Return type cannot be 'void'.</value>
  </data>
  <data name="ExceptionTypeNotFound" xml:space="preserve">
    <value>The name '{0}' does not denotate a class, a table, or an extended data type.</value>
  </data>
  <data name="ExceptionVariableNotDeclared" xml:space="preserve">
    <value>Variable {0} is not declared.</value>
  </data>
</root>