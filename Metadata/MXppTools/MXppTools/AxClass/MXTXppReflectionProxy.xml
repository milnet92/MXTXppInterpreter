<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MXTXppReflectionProxy</Name>
	<SourceCode>
		<Declaration><![CDATA[
using XppInterpreter;
using CArray = Microsoft.Dynamics.Ax.Xpp.Array;

public final class MXTXppReflectionProxy implements XppInterpreter.Interpreter.Proxy.IXppReflectionProxy
{
    private const str TYPE_VOID = 'System.Void';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetAssemblyType</Name>
				<Source><![CDATA[
    public static System.Type GetAssemblyType(System.String _namespace, System.String _typeName)
    {
        str assemblyName = MXTXppMetadataAssemblyCache::getAssemblyName(_namespace, _typeName);
        str typeName = strFmt("%1.%2, %3", _namespace, _typeName, assemblyName);

        return System.Type::GetType(strFmt(typeName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetTypeFromNamespace</Name>
				<Source><![CDATA[
    public System.Type GetTypeFromNamespace(System.String _namespace, System.String _typeName)
    {
        return MXTXppReflectionProxy::GetAssemblyType(_namespace, _typeName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsAssemblyNamespace</Name>
				<Source><![CDATA[
    public System.Boolean IsAssemblyNamespace(System.String _namespace, System.Boolean _partialSearch)
    {
        return MXTXppMetadataAssemblyCache::namespaceExists(_namespace, _partialSearch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssemblyHasType</Name>
				<Source><![CDATA[
    public System.Boolean AssemblyHasType(System.String _namespace, System.String _typeName)
    {
        return MXTXppMetadataAssemblyCache::typeExists(_namespace, _typeName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsEnum</Name>
				<Source><![CDATA[
    public System.Boolean IsEnum(System.String name)
    {
        return SysDictEnum::newName(name) != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsInstantiable</Name>
				<Source><![CDATA[
    public System.Boolean IsInstantiable(System.String name)
    {
        return className2Id(name) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ClearCommon</Name>
				<Source><![CDATA[
    public void ClearCommon(System.Object _common)
    {
        Common common = _common;

        common.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>CallInstanceFunction</Name>
				<Source><![CDATA[
    public System.Object CallInstanceFunction(System.Object _instance, System.String _methodName, System.Object[] _parameters)
    {
        System.Object obj = _instance as Microsoft.Dynamics.Ax.Xpp.XppObjectBase;

        if (obj || this.IsCommon(_instance))
        {
            return Microsoft.Dynamics.Ax.Xpp.ReflectionCallHelper::MakeInstanceCall(_instance, _methodName, _parameters);
        }
        else
        {
            System.Reflection.MethodInfo methodInfo = XppInterpreter.Core.ReflectionHelper::FindMethodCore(_instance.GetType(), _methodName, _parameters, false);

            if (methodInfo)
            {
                return methodInfo.Invoke(_instance, _parameters);
            }
            
            throw new System.Exception(strFmt("Method '%1' was not found in type '%1'", _methodName, _instance.GetType().Name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CallStaticFunction</Name>
				<Source><![CDATA[
    public System.Object CallStaticFunction(System.String _namespace, System.String _className, System.String _methodName, System.Object[] _parameters)
    {
        return Microsoft.Dynamics.Ax.Xpp.ReflectionCallHelper::MakeStaticCall(this.getClassType(_namespace, _className), _methodName, _parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateInstance</Name>
				<Source><![CDATA[
    public System.Object CreateInstance(System.String _namespace, System.String _className, System.Object[] parameters)
    {
        if (_namespace)
        {
            return System.Activator::CreateInstance(this.getClassType(_namespace, _className), parameters);
        }

        return Microsoft.Dynamics.Ax.Xpp.ReflectionCallHelper::MakeNewObjCall(this.getClassType(_namespace, _className), parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetInstanceProperty</Name>
				<Source><![CDATA[
    public System.Object GetInstanceProperty(System.Object _instance, System.String _propertyName)
    {
        if (this.isCommon(_instance))
        {
            Microsoft.Dynamics.Ax.Xpp.Common common = _instance;
            return common.getFieldValue(_propertyName);
        }
        else
        {
            System.Reflection.PropertyInfo propertyInfo = _instance.GetType().GetProperty(_propertyName);

            if (propertyInfo)
            {
                return propertyInfo.GetValue(_instance);
            }
            else
            {
                System.Reflection.FieldInfo fieldInfo = _instance.GetType().GetField(_propertyName);
                if (fieldInfo)
                {
                    return fieldInfo.GetValue(_instance);
                }
                else
                {
                    throw error(strFmt("@MXT:InvalidPropertyError", _propertyName));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetStaticProperty</Name>
				<Source><![CDATA[
    public System.Object GetStaticProperty(System.String _namespace, System.String _className, System.String _propertyName)
    {
        System.Type type = this.getClassType(_namespace, _className);
        System.Reflection.PropertyInfo propertyInfo = type.GetProperty(_propertyName);
        
        if (propertyInfo)
        {
            return propertyInfo.GetValue(null);
        }
        else
        {
            System.Reflection.FieldInfo fieldInfo = type.GetField(_propertyName);

            if (fieldInfo)
            {
                return fieldInfo.GetValue(null);
            }
        }

        throw error(strFmt("@MXT:InvalidPropertyError", _propertyName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsCommon</Name>
				<Source><![CDATA[
    public boolean IsCommon(System.Object _instance)
    {
        System.Type type = _instance.GetType();

        return this.IsCommonType(type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsCommonType</Name>
				<Source><![CDATA[
    public boolean IsCommonType(System.Type _type)
    {
        if (_type == null) return false;

        return _type.BaseType == Microsoft.Dynamics.Ax.Xpp.ReflectionCallHelper::getType("Common");
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetInstanceProperty</Name>
				<Source><![CDATA[
    public void SetInstanceProperty(System.Object _instance, System.String _propertyName, System.Object _value)
    {
        if (this.IsCommon(_instance))
        {
            Microsoft.Dynamics.Ax.Xpp.Common common = _instance;
            
            this.setCommonFieldValue(common, _propertyName, _value);
        }
        else
        {
            // Check if it's actually a property
            System.Reflection.PropertyInfo propertyInfo = _instance.GetType().GetProperty(_propertyName);
            if (propertyInfo)
            {
                propertyInfo.SetValue(_instance, _value);
            }
            else
            {
                // Check if it's a field
                System.Reflection.FieldInfo fieldInfo = _instance.GetType().GetField(_propertyName);
                if (fieldInfo)
                {
                    fieldInfo.SetValue(_instance, _value);
                }
                else
                {
                    throw error(strFmt("@MXT:InvalidPropertyError", _propertyName));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CallGlobalOrPredefinedFunction</Name>
				<Source><![CDATA[
    public System.Object CallGlobalOrPredefinedFunction(XppInterpreter.Interpreter.RuntimeContext _context, System.String _methodName, System.Object[] _parameters)
    {
        if (MXTXppPredefinedFunctions::isCustomPredefinedFunction(_methodName))
        {
            return MXTXppPredefinedFunctions::callMethod(_context, _methodName, _parameters);
        }
        else if (this.isGlobalFunction(_methodName))
        {
            System.String invariantMethodName = XppInterpreter.Core.ReflectionHelper::GetMethodInvariantName(MXTXppTypes::GlobalType, _methodName);
            return Microsoft.Dynamics.Ax.Xpp.ReflectionCallHelper::MakeStaticCall(MXTXppTypes::GlobalType, invariantMethodName, _parameters);
        }

        throw new System.Exception(strFmt("Method '%1' was not found.", _methodName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGlobalFunction</Name>
				<Source><![CDATA[
    private boolean isGlobalFunction(str _methodName)
    {
        return XppInterpreter.Core.ReflectionHelper::GetMethodInvariantName(MXTXppTypes::GlobalType, _methodName) != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClassType</Name>
				<Source><![CDATA[
    private System.Type getClassType(str _namespace, str _className)
    {
        if (_namespace)
        {
            // Get assembly name
            MXTAssemblyDisplayName assemblyName = MXTXppMetadataAssemblyCache::getAssemblyName(_namespace, _className);

            return System.Type::GetType(strFmt("%1.%2, %3", _namespace, _className, assemblyName));
        }

        return Microsoft.Dynamics.Ax.Xpp.ReflectionCallHelper::GetTypeFromClassName(_className);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetEnumValue</Name>
				<Source><![CDATA[
    public System.Object GetEnumValue(System.String _enumClass, System.String _enumValue)
    {
        System.Type enumType = Microsoft.Dynamics.Ax.Xpp.ReflectionCallHelper::getType(_enumClass);

        Debug::assert(enumType.IsEnum);

        return System.Enum::ToObject(enumType, symbol2Enum(enumName2Id(_enumClass), _enumValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetAllEnumvalues</Name>
				<Source><![CDATA[
    public System.String[] GetAllEnumvalues(System.String _enumType)
    {
        SysDictEnum dictEnum = new SysDictEnum(enumName2Id(_enumType));
        System.String[] ret = new System.String[dictEnum.values()]();

        for (int i = 0; i < dictEnum.values(); i++)
        {
            ret.SetValue(dictEnum.index2Symbol(i), i);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommonFieldValue</Name>
				<Source><![CDATA[
    private void setCommonFieldValue(Common _common, str _fieldName, anytype _value)
    {
        SysDictField dictField = SysDictField::newName(tableId2Name(_common.TableId), _fieldName);

        _common.(dictField.id()) = _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetMethodSyntax</Name>
				<Source><![CDATA[
    public System.String GetMethodSyntax(System.String _typeName, System.String _methodName, System.String _namespace)
    {
        if (!_namespace)
        {
            SysDictMethod dictMethod = this.getDictMethod(_typeName, _methodName);

            return dictMethod ? dictMethod.metadataSyntax() : '';
        }
        else
        {
            System.Type type = MXTXppReflectionProxy::GetAssemblyType(_namespace, _typeName);
            System.Reflection.MethodInfo methodInfo = Core.ReflectionHelper::GetMethod(type, _methodName);

            str ret = "";

            ret += methodInfo.ReturnType.FullName == TYPE_VOID ? 
                'void' : 
                strFmt("%1.%2", methodInfo.ReturnType.Namespace, methodInfo.ReturnType.Name);

            ret += ' ';

            ret += methodInfo.Name;
            ret +='(';

            System.Reflection.ParameterInfo[] parameters = methodInfo.GetParameters();
            System.Collections.IEnumerator enumerator = parameters.GetEnumerator();
            int nParm = 0;

            while (enumerator.MoveNext())
            {
                nParm ++;

                System.Reflection.ParameterInfo parameter = enumerator.Current;

                ret += parameter.IsOptional ? '[' : '';
                ret += parameter.IsOut ? 'out' : '';
                ret += strFmt("%1.%2", parameter.ParameterType.Namespace, parameter.ParameterType.Name) + ' ';
                ret += parameter.Name;
                ret += parameter.IsOptional ? ']' : '';
                ret += nParm < parameters.Length ? ', ' : '';
            }

            ret += ')';
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDictMethod</Name>
				<Source><![CDATA[
    private SysDictMethod getDictMethod(str _typeName, str _methodName)
    {
        SysDictMethod dictMethod = null;

        if (this.IsInstantiable(_typeName))
        {
            SysDictClass dictClass = SysDictClass::newName(_typeName);

            if (dictClass.hasObjectMethod(_methodName))
            {
                dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, className2Id(_typeName), _methodName);
            }
            else if (dictClass.hasStaticMethod(_methodName))
            {
                dictMethod = new SysDictMethod(UtilElementType::ClassStaticMethod, className2Id(_typeName), _methodName);
            }
        }
        else if (tableName2Id(_typeName))
        {
            SysDictTable dictTable = SysDictTable::newName(_typeName);

            Set tableMethods = dictTable.methods(true, true, true, tableStr(Common));
            SetEnumerator tableMethodsEnumerator = tableMethods.getEnumerator();

            while (tableMethodsEnumerator.moveNext())
            {
                SysDictMethod currentMethod = tableMethodsEnumerator.current() as SysDictMethod;
                if (currentMethod.name() == _methodName)
                {
                    dictMethod = currentMethod;
                    break;
                }
            }
        }
        else if (!_typeName)
        {
            if (this.isGlobalFunction(_methodName))
            {
                dictMethod = new SysDictMethod(UtilElementType::ClassStaticMethod, className2Id(MXTXppTypes::GlobalType.Name), _methodName);
            }
            else if (MXTXppPredefinedFunctions::isCustomPredefinedFunction(_methodName))
            {
                dictMethod = new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(MXTXppPredefinedFunctions), _methodName);
            }
        }

        return dictMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LabelIdToValue</Name>
				<Source><![CDATA[
    public System.String LabelIdToValue(System.String _labelId, System.String _languageId)
    {
        str languageId = _languageId ? _labelId : Global::infolog().language();
        return SysLabel::labelId2String(_labelId, languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeHasMethod</Name>
				<Source><![CDATA[
    public boolean TypeHasMethod(System.Type _caller, System.String _methodName)
    {
        if (!_caller) return false;

        return this.getDictMethod(_caller.Name, _methodName) ||
               XppInterpreter.Core.ReflectionHelper::TypeHasMethod(_caller, _methodName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeHasProperty</Name>
				<Source><![CDATA[
    public boolean TypeHasProperty(System.Type _caller, System.String _propertyName)
    {
        if (this.IsCommonType(_caller))
        {
            return fieldName2Id(tableName2Id(_caller.Name), _propertyName);
        }
        else if (_caller)
        {
            return XppInterpreter.Core.ReflectionHelper::TypeHasField(_caller, _propertyName) ||
                   XppInterpreter.Core.ReflectionHelper::TypeHasProperty(_caller, _propertyName);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>EnumHasMember</Name>
				<Source><![CDATA[
    public boolean EnumHasMember(System.String _enumName, System.String _memberName)
    {
        if (!_enumName) return false;

        SysDictEnum enum = SysDictEnum::newName(_enumName);

        if (!enum) return false;

        return enum.symbol2Value(_memberName) != 255;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetMethodReturnType</Name>
				<Source><![CDATA[
    public System.Type GetMethodReturnType(System.Type _caller, System.String _methodName)
    {
        if (!_caller) return null;

        DictMethod dictMethod = this.getDictMethod(_caller.Name, _methodName);

        if (dictMethod)
        {
            if (dictMethod.returnTypeName())
            {
                return MXTXppCastingProxy::getClrTypeFromTypeName(dictMethod.returnTypeName());
            }
            else
            {
                return MXTXppCastingProxy::getSystemTypeFromTypes(dictMethod.returnType());
            }
        }
        else
        {
            System.Reflection.MethodInfo methodInfo = XppInterpreter.Core.ReflectionHelper::GetMethod(_caller, _methodName);

            if (methodInfo)
            {
                return methodInfo.ReturnType;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetFieldReturnType</Name>
				<Source><![CDATA[
    public System.Type GetFieldReturnType(System.Type _caller, System.String _fieldName)
    {
        if (!_caller) return null;

        str typeName = _caller.Name;

        if (fieldName2Id(tableName2Id(typeName), _fieldName))
        {
            SysDictField dictField = SysDictField::findFieldByName(typeName, _fieldName);

            if (dictField.typeName())
            {
                return MXTXppCastingProxy::getClrTypeFromTypeName(dictField.typeName());
            }
            else
            {
                return MXTXppCastingProxy::getSystemTypeFromTypes(dictField.type());
            }
        }
        else if (XppInterpreter.Core.ReflectionHelper::TypeHasField(_caller, _fieldName))
        {
            return XppInterpreter.Core.ReflectionHelper::GetField(_caller, _fieldName).FieldType;
        }
        else if (XppInterpreter.Core.ReflectionHelper::TypeHasProperty(_caller, _fieldName))
        {
            return XppInterpreter.Core.ReflectionHelper::GetProperty(_caller, _fieldName).PropertyType;
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>