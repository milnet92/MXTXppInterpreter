<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MXTXppExceptionsProxy</Name>
	<SourceCode>
		<Declaration><![CDATA[
using XppInterpreter.Interpreter.Proxy;

/// <summary>
/// Exception proxy used by the interpreter
/// </summary>
internal final class MXTXppExceptionsProxy implements XppInterpreter.Interpreter.Proxy.IXppExceptionsProxy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Throw</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws the given object as an exception
    /// </summary>
    /// <param name = "obj">Object to throw</param>
	public void Throw(System.Object obj)
    {
        if (obj is System.Exception)
        {
            throw obj as System.Exception;
        }
        else
        {
            // Assume it's a member of Exception enum
            Exception exception = obj;
            throw exception;
        }
	}

]]></Source>
			</Method>
			<Method>
				<Name>IsExceptionMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given <c>System.Exception</c> is of the given Exception enum member 
    /// </summary>
    /// <param name = "_exception">Exception</param>
    /// <param name = "_exceptionMember">Exception enum member as string</param>
    /// <returns>True if it is of the given value, otherwise false</returns>
    public boolean IsExceptionMember(System.Exception _exception, System.String _exceptionMember)
    {
        if (_exception == null)
        {
            return false;
        }

        Exception exception;

        exception = str2Enum(Exception, _exceptionMember);

        switch (exception)
        {
            case Exception::Break: return _exception is Microsoft.Dynamics.Ax.Xpp.BreakException;
            case Exception::CLRError: return _exception is Microsoft.Dynamics.Ax.Xpp.ClrErrorException;
            case Exception::CompanyAccessViolation: return _exception is Microsoft.Dynamics.Ax.Xpp.CompanyAccessViolationException;
            case Exception::DDEerror: return _exception is Microsoft.Dynamics.Ax.Xpp.DDEException;
            case Exception::Deadlock: return _exception is Microsoft.Dynamics.Ax.Xpp.DeadlockException;
            case Exception::DuplicateKeyException: return _exception is Microsoft.Dynamics.Ax.Xpp.DuplicateKeyException;
            case Exception::DuplicateKeyExceptionNotRecovered: return _exception is Microsoft.Dynamics.Ax.Xpp.DuplicateKeyNotRecoveredException;
            case Exception::Error: return _exception is Microsoft.Dynamics.Ax.Xpp.ErrorException;
            case Exception::FunctionArgument: return _exception is Microsoft.Dynamics.Ax.Xpp.FunctionArgumentException;
            case Exception::Info: return _exception is Microsoft.Dynamics.Ax.Xpp.InfoException;
            case Exception::Internal: return _exception is Microsoft.Dynamics.Ax.Xpp.InternalException;
            case Exception::MaximumRetryCountExceeded: return _exception is Microsoft.Dynamics.Ax.Xpp.MaximumRetryCountExceededException;
            case Exception::MethodNotFound: return _exception is Microsoft.Dynamics.Ax.Xpp.MethodNotFoundException;
            case Exception::NoValidRunnableCode: return _exception is Microsoft.Dynamics.Ax.Xpp.NoValidRunnableCodeException;
            case Exception::Numeric: return _exception is Microsoft.Dynamics.Ax.Xpp.NumericException;
            case Exception::PassClrObjectAcrossTiers: return _exception is Microsoft.Dynamics.Ax.Xpp.PassClrObjectAcrossTiersException;
            case Exception::PersistentSqlConnectionError: return _exception is Microsoft.Dynamics.Ax.Xpp.PersistentSqlConnectionErrorException;
            case Exception::Sequence: return _exception is Microsoft.Dynamics.Ax.Xpp.SequenceException;
            case Exception::SystemMaintenance: return _exception is Microsoft.Dynamics.Ax.Xpp.SystemMaintenanceException;
            case Exception::Timeout: return _exception is Microsoft.Dynamics.Ax.Xpp.TimeoutException;
            case Exception::TransientSqlConnectionError: return _exception is Microsoft.Dynamics.Ax.Xpp.TransientSqlConnectionError;
            case Exception::TypeCast: return _exception is Microsoft.Dynamics.Ax.Xpp.TypeCastException;
            case Exception::UpdateConflict: return _exception is Microsoft.Dynamics.Ax.Xpp.UpdateConflictException;
            case Exception::UpdateConflictNotRecovered: return _exception is Microsoft.Dynamics.Ax.Xpp.UpdateConflictNotRecoveredException;
            case Exception::ViewDataSourceValidation: return _exception is Microsoft.Dynamics.Ax.Xpp.ViewDataSourceValidationException;
            case Exception::Warning: return _exception is Microsoft.Dynamics.Ax.Xpp.WarningException;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>