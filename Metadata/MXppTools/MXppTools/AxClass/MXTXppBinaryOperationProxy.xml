<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MXTXppBinaryOperationProxy</Name>
	<SourceCode>
		<Declaration><![CDATA[
using XppInterpreter.Interpreter.Proxy;

/// <summary>
/// Binary operation proxy used by the interpreter
/// </summary>
internal final class MXTXppBinaryOperationProxy implements XppInterpreter.Interpreter.Proxy.IXppBinaryOperationProxy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes an addition of two objects
    /// </summary>
    /// <param name = "left">Left object</param>
    /// <param name = "right">Right object</param>
    /// <returns>Result as a System.Object</returns>
	public System.Object Add(System.Object left, System.Object right)
    {
        anytype l = left, r = right;
        return l + r;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Substract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a substraction of two objects
    /// </summary>
    /// <param name = "left">Left object</param>
    /// <param name = "right">Right object</param>
    /// <returns>Result as a System.Object</returns>
    public System.Object Substract(System.Object left, System.Object right)
    {
        anytype l = left, r = right;
        return l - r;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Multiply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a multiplication of two objects
    /// </summary>
    /// <param name = "left">Left object</param>
    /// <param name = "right">Right object</param>
    /// <returns>Result as a System.Object</returns>
    public System.Object Multiply(System.Object left, System.Object right)
    {
        anytype l = left, r = right;
        return l * r;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Divide</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a division of two objects
    /// </summary>
    /// <param name = "left">Left object</param>
    /// <param name = "right">Right object</param>
    /// <returns>Result as a System.Object</returns>
    public System.Object Divide(System.Object left, System.Object right)
    {
        anytype l = left, r = right;
        return l / r;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IntDivide</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes an integer division of two objects
    /// </summary>
    /// <param name = "left">Left object</param>
    /// <param name = "right">Right object</param>
    /// <returns>Result as a System.Object</returns>
    public System.Object IntDivide(System.Object left, System.Object right)
    {
        anytype l = left, r = right;
        return l div r;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BinaryAnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a binary AND of two objects
    /// </summary>
    /// <param name = "left">Left object</param>
    /// <param name = "right">Right object</param>
    /// <returns>Result as a System.Object</returns>
    public System.Object BinaryAnd(System.Object left, System.Object right)
    {
        anytype l = left, r = right;
        return l & r;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BinaryOr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a binary OR of two objects
    /// </summary>
    /// <param name = "left">Left object</param>
    /// <param name = "right">Right object</param>
    /// <returns>Result as a System.Object</returns>
    public System.Object BinaryOr(System.Object left, System.Object right)
    {
        anytype l = left, r = right;
        return l | r;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BinaryXOr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a binary XOR of two objects
    /// </summary>
    /// <param name = "left">Left object</param>
    /// <param name = "right">Right object</param>
    /// <returns>Result as a System.Object</returns>
    public System.Object BinaryXOr(System.Object left, System.Object right)
    {
        anytype l = left, r = right;
        return l ^ r;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LeftShift</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a left shift of two objects
    /// </summary>
    /// <param name = "left">Left object</param>
    /// <param name = "right">Right object</param>
    /// <returns>Result as a System.Object</returns>
    public System.Object LeftShift(System.Object left, System.Object right)
    {
        int r = right;
        anytype l = left;
        return l << r;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RightShift</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a right shift of two objects
    /// </summary>
    /// <param name = "left">Left object</param>
    /// <param name = "right">Right object</param>
    /// <returns>Result as a System.Object</returns>
    public System.Object RightShift(System.Object left, System.Object right)
    {
        int r = right;
        anytype l = left;
        return l >> r;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Mod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a modulus of two objects
    /// </summary>
    /// <param name = "left">Left object</param>
    /// <param name = "right">Right object</param>
    /// <returns>Result as a System.Object</returns>
    public System.Object Mod(System.Object left, System.Object right)
    {
        anytype l = left, r = right;
        return l mod r;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Greater</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes an boolean greater check to the two objects
    /// </summary>
    /// <param name = "left">Left object</param>
    /// <param name = "right">Right object</param>
    /// <returns>If left is greated than right, true, otherwise false</returns>
    public System.Boolean Greater(System.Object left, System.Object right)
    {
        anytype l = left, r = right;
        return l > r;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AreEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the two objects are equal
    /// </summary>
    /// <param name = "left">Left object</param>
    /// <param name = "right">Right object</param>
    /// <returns>If equal, true, otherwise false</returns>
    public System.Boolean AreEqual(System.Object left, System.Object right)
    {
        return left == right;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>