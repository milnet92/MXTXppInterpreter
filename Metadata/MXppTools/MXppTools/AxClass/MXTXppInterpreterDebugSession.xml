<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MXTXppInterpreterDebugSession</Name>
	<SourceCode>
		<Declaration><![CDATA[
using XppInterpreter.Interpreter.Debug;
using XppInterpreter.Interpreter;
using XppInterpreter.Parser;
using XppInterpreter.Core;

using System.Linq;

/// <summary>
/// Represents a debug / execution session initiated by the editor.
/// </summary>
public class MXTXppInterpreterDebugSession
{
    XppInterpreter  interpreter;
    Program         program;
    XppDebugger     debugger;
    boolean         executing, stopOnBreakpoint;
    str             sourceCode;
    InterpreterResult currentExecutionResult;
    MXTXppInterpreterCodeEditorParseExceptionCollection lastParseExceptions;
    MXTXppInterpreterCodeEditorControl          editor;
    MXTXppInterpreterVariablesInspectorControl  inspector;
    XppInterpreterDependencyCollection          dependencyCollection;

    XppInterpreter.Interpreter.Proxy.XppProxy proxy = new XppInterpreter.Interpreter.Proxy.XppProxy(
                    new MXTXppIntrinsicFunctionProvider(),
                    new MXTXppBinaryOperationProxy(),
                    new MXTXppCastingProxy(),
                    new MXTXppUnaryOperationProxy(),
                    new MXTXppDataAccessProxy(),
                    new MXTXppReflectionProxy(),
                    new MXTXppExceptionsProxy(),
                    new MXTXppQueryGenerationProxy());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(MXTXppInterpreterCodeEditorControl _editor, MXTXppInterpreterVariablesInspectorControl _inspector = null)
    {
        editor = _editor;
        inspector = _inspector;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for the execution started event. This event
    /// is raised when the code execution has started.
    /// </summary>
    delegate void executionStarted() {}

]]></Source>
			</Method>
			<Method>
				<Name>executionFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for the execution finished event. This event
    /// is raised when the code execution has finished with or without 
    /// errors
    /// </summary>
    delegate void executionFinished() {}

]]></Source>
			</Method>
			<Method>
				<Name>executionResumed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for the execution resumed event. This event
    /// is raised when the debugger resumes the execution after
    /// a breakpoint
    /// </summary>
    delegate void executionResumed() {}

]]></Source>
			</Method>
			<Method>
				<Name>breakpointHit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for the breakpoint hit event. This event 
    /// is raised when the debugger stops due to a breakpoint.
    /// </summary>
    /// <param name = "_hit"></param>
    delegate void breakpointHit(MXTXppInterpreterCodeEditorBreakpointHitContract _hit) {}

]]></Source>
			</Method>
			<Method>
				<Name>isExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the execution is in process. When the debugger
    /// stopped the execution due to a breakpoint, this method
    /// return true.
    /// </summary>
    /// <returns></returns>
    public boolean isExecuting()
    {
        return executing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the dependencies for the given script
    /// </summary>
    /// <param name = "_scriptId">Script Id</param>
    public void parseDependencies(RecId _scriptId)
    {
        dependencyCollection = MXTXppScriptDependencyManager::parseDependencies(_scriptId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the program associated with the session
    /// </summary>
    public void execute()
    {
        editor.executionPhase(MXTXppInterpreterExecutionPhase::Started);

        if (inspector)
        {
            inspector.executionPhase(MXTXppInterpreterExecutionPhase::Started);
        }

        MXTXppInterpreterParameters parameters = MXTXppInterpreterParameters::find();

        // Setup options
        XppInterpreter.Interpreter.XppInterpreterOptions options = new XppInterpreter.Interpreter.XppInterpreterOptions();
        options.EmitGlobalTtsAbort = parameters.EmitGlobalTtsAbort;
        options.MaxLoopIterations = parameters.MaxLoopIteratations;

        interpreter = new XppInterpreter.Interpreter.XppInterpreter(proxy, options);
        interpreter.Debugger = debugger;

        MXTXppInterpreterScriptExecutionLog::startLog(sourceCode, parameters.EmitGlobalTtsAbort);

        this.executionStarted();

        executing = true;

        System.Exception ex;

        try
        {
            currentExecutionResult = interpreter.Interpret(program, dependencyCollection);

            if (currentExecutionResult.HasStopped)
            {
                this.hitBreakpoint(currentExecutionResult.Breakpoint);
            }
        }
        catch (ex)
        {
            this.handleExecutionFinished();

            throw ex;
        }

        if (currentExecutionResult.HasFinished)
        {
            this.handleExecutionFinished();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentScopeHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current scope handler given the runtime context
    /// </summary>
    /// <param name = "_context">Runtime context</param>
    /// <returns>A scope handler</returns>
    private ScopeHandler getCurrentScopeHandler(RuntimeContext _context)
    {
        RuntimeContext  currentContext = _context;

        while (currentContext.InnerContext != null)
        {
            currentContext = currentContext.InnerContext;
        }

        return currentContext.ScopeHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentVariableState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the local variable tree for the current scope. This method is used 
    /// by the variable inspector.
    /// </summary>
    /// <returns></returns>
    public MXTXppInterpreterVariablesInspectorLocalsEntry currentVariableState()
    {
        MXTXppInterpreterVariablesInspectorLocalsEntry rootEntry = new MXTXppInterpreterVariablesInspectorLocalsEntry();
        rootEntry.parmName('ROOT');

        List subentries = new List(Types::Class);
        Set variablesInScope = new Set(Types::String);

        if (currentExecutionResult != null)
        {
            var currentScope = this.getCurrentScopeHandler(currentExecutionResult.SaveState.Context).CurrentScope;
            
            while (currentScope != null)
            {
                var normalizedEntries = currentScope.GetNormalizedScopeEntries(proxy);
                int elements = normalizedEntries.Length;

                for (int i = 0; i < elements; i++)
                {
                    NormalizedScopeEntry scopeEntry = normalizedEntries.GetValue(i);

                    if (!variablesInScope.in(scopeEntry.VariableName))
                    {
                        var value = scopeEntry.Value;

                        // Create entry
                        MXTXppInterpreterVariablesInspectorLocalsEntry subEntry = new MXTXppInterpreterVariablesInspectorLocalsEntry();

                        subEntry.parmName(scopeEntry.VariableName);
                        
                        str displayValue = DebugHelper::GetDebugDisplayValue(value);

                        if (typeOf(value) == Types::Record && !value)
                        {
                            displayValue = 'No data selected';
                        }

                        subEntry.parmValue(displayValue);
                        subEntry.parmType(scopeEntry.TypeName);
                        subEntry.parmEditable(scopeEntry.Editable);
                        subEntry.parmChanged(scopeEntry.Changed);

                        //TODO: subEntry.parmEnumValues(scopeEntry.EnumValues);

                        subentries.addEnd(subEntry);

                        variablesInScope.add(scopeEntry.VariableName);
                    }
                }

                currentScope = currentScope.Parent;
            }
        }

        rootEntry.parmSubentries(subEntries);

        return rootEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleExecutionFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes care of the execution when finished
    /// </summary>
    private void handleExecutionFinished()
    {
        currentExecutionResult = null;
        executing = false;

        this.executionFinished();

        editor.executionPhase(MXTXppInterpreterExecutionPhase::Finished);
        editor.breakpointHit(null);

        if (inspector)
        {
            inspector.inspectVariables(null);
            inspector.executionPhase(MXTXppInterpreterExecutionPhase::Finished);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the session
    /// </summary>
    public void clear()
    {
        debugger = null;
        sourceCode = "";
        program = null;
        lastParseExceptions = null;
        executing = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>continueExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Continues the execution of the program based with the given 
    /// action performed by the consumer
    /// </summary>
    /// <param name = "_debugAction">Debug action</param>
    public void continueExecution(DebugAction _debugAction)
    {
        if (!this.stopOnBreakpoint) return;

        System.Exception ex;
        try
        {
            stopOnBreakpoint = false;
            this.executionResumed();

            currentExecutionResult = interpreter.Continue(currentExecutionResult, _debugAction);

            if (currentExecutionResult.HasStopped)
            {
                this.hitBreakpoint(currentExecutionResult.Breakpoint);
            }
        }
        catch (ex)
        {
            this.handleExecutionFinished();

            throw ex;
        }

        if (currentExecutionResult.HasFinished)
        {
            this.handleExecutionFinished();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hitBreakpoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inform the consumers about a breakpoint being hit
    /// </summary>
    /// <param name = "_breakpoint"></param>
    private void hitBreakpoint(XppInterpreter.Interpreter.Debug.Breakpoint _breakpoint)
    {
        stopOnBreakpoint = true;

        MXTXppInterpreterCodeEditorBreakpointHitContract hit = new MXTXppInterpreterCodeEditorBreakpointHitContract();

        hit.parmFromLine(_breakpoint.SourceCodeMapping.From.Line);
        hit.parmFromPosition(_breakpoint.SourceCodeMapping.From.Position);
        hit.parmToLine(_breakpoint.SourceCodeMapping.To.Line);
        hit.parmToPosition(_breakpoint.SourceCodeMapping.To.Position);
        this.breakpointHit(hit);

        editor.breakpointHit(hit);
        editor.setFocus();

        if (inspector)
        {
            inspector.inspectVariables(this.currentVariableState());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyBreakpoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is any breakpoint currently attached
    /// </summary>
    /// <returns>True if exists, otherwise false</returns>
    public boolean hasAnyBreakpoint()
    {
        boolean ret;

        if (debugger != null)
        {
            ret = debugger.BreakpointCount != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryParse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to parse the given X++ source code. Returns whatever exception
    /// was rased by the parser
    /// </summary>
    /// <param name = "_sourceCode">X++ source code</param>
    /// <returns></returns>
    public MXTXppInterpreterCodeEditorParseExceptionCollection tryParse(str _sourceCode)
    {
        MXTXppInterpreterCodeEditorParseException ex;

        if (System.String::Compare(_sourceCode, sourceCode, false) == 0)
        {
            return lastParseExceptions;
        }

        ParseException parseException;

        debugger = null;
        program = null;
        sourceCode = _sourceCode;

        try
        {
            var result = MXTXppInterpreterExecutor::parse(_sourceCode);

            if (result.IsCorrect)
            {
                program = result.AST as XppInterpreter.Parser.Program;
                lastParseExceptions = null;
                debugger = new XppInterpreter.Interpreter.Debug.XppDebugger(program);
            }
            else
            {
                lastParseExceptions = MXTXppInterpreterCodeEditorParseExceptionCollection::fromParseResultErrors(result.Errors);
                debugger = null;
            }
        }
        catch(parseException)
        {
            lastParseExceptions = new MXTXppInterpreterCodeEditorParseExceptionCollection();
            lastParseExceptions.add(new MXTXppInterpreterCodeEditorParseException(parseException.Message, parseException.Line, parseException.Position));
        }
        catch
        {
            lastParseExceptions = new MXTXppInterpreterCodeEditorParseExceptionCollection();
            lastParseExceptions.add(new MXTXppInterpreterCodeEditorParseException("An error occurred while parsing", 0, 0));
        }

        return lastParseExceptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrRemoveBreakpoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to add or remove a breakpoint given the 
    /// source code line and position
    /// </summary>
    /// <param name = "_line">Line of the request</param>
    /// <param name = "_position">Position within the line of the request</param>
    /// <param name = "_sourceCode">Source code</param>
    /// <returns>An instance of <c>MXTXppInterpreterCodeEditorBreakpointContract</c></returns>
    public MXTXppInterpreterCodeEditorBreakpointContract addOrRemoveBreakpoint(int _line, int _position, str _sourceCode)
    {
        MXTXppInterpreterCodeEditorBreakpointContract ret;

        if (_sourceCode == '' || this.tryParse(_sourceCode))
            return ret;

        BreakpointAction breakpointAction = debugger.TryAddBreakpoint(_line, _position);

        ret = new MXTXppInterpreterCodeEditorBreakpointContract();

        if (breakpointAction.NewBreakpoint != null)
        {
            XppInterpreter.Interpreter.Debug.Breakpoint newBreakpoint = breakpointAction.NewBreakpoint;

            ret.parmCreated(true);
            ret.parmFromLine(newBreakpoint.SourceCodeMapping.From.Line);
            ret.parmFromPosition(newBreakpoint.SourceCodeMapping.From.Position);
            ret.parmToLine(newBreakpoint.SourceCodeMapping.To.Line);
            ret.parmToPosition(newBreakpoint.SourceCodeMapping.To.Position);
        }

        if (breakpointAction.RemovedBreakpoint != null)
        {
            XppInterpreter.Interpreter.Debug.Breakpoint removedBreakpoint = breakpointAction.RemovedBreakpoint;

            ret.parmRemoved(true);
            ret.parmRemovedFromLine(removedBreakpoint.SourceCodeMapping.From.Line);
            ret.parmRemovedFromPosition(removedBreakpoint.SourceCodeMapping.From.Position);
            ret.parmRemovedToLine(removedBreakpoint.SourceCodeMapping.To.Line);
            ret.parmRemovedToPosition(removedBreakpoint.SourceCodeMapping.To.Position);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryUpdateVariableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to update the value at runtime of a local variable
    /// </summary>
    /// <param name = "_varName">Variable name</param>
    /// <param name = "_newValue">New value for the variable as a string</param>
    /// <returns>An instance of <c>MXTXppInterpreterVariableEditContract</c></returns>
    public MXTXppInterpreterVariableEditContract tryUpdateVariableValue(str _varName, str _newValue)
    {
        if (!stopOnBreakpoint) return null;

        VariableEditValueResponse response = this.getCurrentScopeHandler(currentExecutionResult.SaveState.Context).TrySetVariableValueFromString(_varName, _newValue);

        MXTXppInterpreterVariableEditContract ret = new MXTXppInterpreterVariableEditContract();

        ret.parmValue(response.Value);
        ret.parmError(response.Error);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompletions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all the code editor completions given a line and position
    /// </summary>
    /// <param name = "_line">Line</param>
    /// <param name = "_position">Position within the line</param>
    /// <param name = "_staticCompletion">If complitions are for a static or instance call</param>
    /// <param name = "_sourceCode">Source code</param>
    /// <returns>Completions as an instance of <c>MXTXppCompletionsContract</c></returns>
    public MXTXppCompletionsContract getCompletions(int _line, int _position, boolean _staticCompletion, str _sourceCode)
    {
        XppInterpreter.Parser.Metadata.CompletionProvider completionProvider = new XppInterpreter.Parser.Metadata.CompletionProvider(this.proxy);
        XppInterpreter.Parser.Metadata.CompletionCollection completionCollection = completionProvider.GetCompletions(new MXTXppCompletionProvider(), _sourceCode, _line, _position, _staticCompletion);

        MXTXppCompletionsContract ret = new MXTXppCompletionsContract();
        List completions = new List(Types::Class);

        for (int i = 0; i < completionCollection.Count; i++)
        {
            XppInterpreter.Parser.Metadata.Completion completion = completionCollection.GetAt(i);

            MXTXppCompletionEntryContract entry = new MXTXppCompletionEntryContract();

            entry.parmValue(completion.Value);
            entry.parmEntryType(completion.EntryType.ToString());
            entry.parmDocHtml(completion.DocHtml);

            completions.addEnd(entry);
        }

        ret.parmCompletions(completions);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTokenMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the token found in the line and position. Called by the
    /// editor to display additional information about a token.
    /// </summary>
    /// <param name = "_line">Line</param>
    /// <param name = "_position">Position within the line</param>
    /// <param name = "_isMethodParameters">If the request is relative to the parameters of a function call</param>
    /// <param name = "_sourceCode">Source code</param>
    /// <returns></returns>
    public MXTXppTokenMetadata getTokenMetadata(int _line, int _position, boolean _isMethodParameters, str _sourceCode)
    {
        XppInterpreter.Lexer.XppLexer lexer = new XppInterpreter.Lexer.XppLexer(_sourceCode);
        XppInterpreter.Parser.XppParser parser = new XppInterpreter.Parser.XppParser(lexer, proxy);

        XppInterpreter.Parser.Metadata.TokenMetadata metadata = parser.GetTokenMetadataAt(_line, _position, _isMethodParameters);

        MXTXppTokenMetadata ret;

        if (metadata)
        {
            ret = new MXTXppTokenMetadata();

            ret.parmDocHtml(metadata.GetDisplayHtml());
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>