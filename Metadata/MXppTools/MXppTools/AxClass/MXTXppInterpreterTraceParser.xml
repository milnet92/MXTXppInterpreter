<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MXTXppInterpreterTraceParser</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Services.Tracing.TraceParser;
using Microsoft.Dynamics.AX.Services.Tracing.TraceParser.DataServices;
using Microsoft.Dynamics.AX.Services.Tracing.TraceParser.TraceEvents;
using Microsoft.Dynamics.AX.Services.Tracing.Crimson;
using Microsoft.Dynamics.AX.Services.Tracing.TraceParser.Presentation;
using System.Diagnostics.Eventing.Reader;

final internal class MXTXppInterpreterTraceParser implements System.IDisposable
{
    private const str PropertySqlStatement = 'sqlStatement';
    private const str PropertySqlBindVarValue = 'parameterValue';
    private const str PropertySqlColumnId = 'sqlColumnId';
    private const str PropertySqlSessionId = 'sessionId';
    private const str PropertySqlMachineName = 'machineName';
    private const str PropertySqlExecutionTime = 'executionTimeSeconds';

    private const int AosSqlStatementExecutionLatency = 4922;
    private const int AosSqlStatementInputBind = 4923;

    public static TraceParserOrchestrator traceParserOrchestrator = new TraceParserOrchestrator();

    private str traceName;
    private int traceId;
    private boolean imported;
    private boolean isRunning;
    private Filename etlFileName;
    private BindVariables BindParameters = new BindVariables();
    private Map sqlStatements = new Map(Types::Integer, Types::String);
    private Map sqlStatementsWithValues = new Map(Types::Integer, Types::String);
    private Map sqlStatementsMetadata = new Map(Types::Integer, Types::Container);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>startSQLTrace</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void startSQLTrace()
    {
        SysTraceController::startSQLTrace(traceName);
        isRunning = true;
        this.awaitTraceParser();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stop</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void stop()
    {
        if (isRunning)
        {
            this.awaitTraceParser();
            SysTraceController::stopTrace(traceName);
            isRunning = false;
            etlFileName = traceParserOrchestrator.GetEtlFilePath(traceName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseEtlRow</Name>
				<Source><![CDATA[
    private void parseEtlRow(System.Object _sender, EventArrivedEventArgs _eventArrivedEventArgs)
    {
        var factory = AxTraceEventFactory::GetFactory(_eventArrivedEventArgs.Header.ProviderId);
        if (factory == null)
        {
            return;
        }
        
        if(!AxTraceEventFactory::IsDynamicsProvider(_eventArrivedEventArgs.Header.ProviderId))
        {
            return;
        }
        
        AxTraceEvent traceEvent = factory.Create(_eventArrivedEventArgs);
        
        if (traceEvent.ActivityId != getCurrentThreadActivityId())
        {
            return;
        }
        
        var bindValues = BindParameters.Values;

        switch (traceEvent.EventId)
        {
            case AosSqlStatementExecutionLatency:
                if (_eventArrivedEventArgs.Properties.ContainsKey(PropertySqlStatement))
                {
                    str sqlStatement = _eventArrivedEventArgs.Properties.Get_Item(PropertySqlStatement);
                    str sqlStatementWithValues = SqlFormatter::BindParameters(sqlStatement, bindValues.Values);
                    str machineName = _eventArrivedEventArgs.Properties.Get_Item(PropertySqlMachineName);
                    str sessionId = _eventArrivedEventArgs.Properties.Get_Item(PropertySqlSessionId);
                    str executionTimeSeconds = _eventArrivedEventArgs.Properties.Get_Item(PropertySqlExecutionTime);

                    sqlStatements.add(sqlStatements.elements(), sqlStatement);
                    sqlStatementsWithValues.add(sqlStatementsWithValues.elements(), sqlStatementWithValues);
                    sqlStatementsMetadata.add(sqlStatementsMetadata.elements(), 
                        [sessionId, machineName, str2Num(executionTimeSeconds) * 1000]);
                }
                bindValues.Clear();
                break;

            case AosSqlStatementInputBind:
                if (_eventArrivedEventArgs.Properties.ContainsKey(PropertySqlColumnId) &&
                    _eventArrivedEventArgs.Properties.ContainsKey(PropertySqlBindVarValue))
                {
                    int columnId = any2Int(_eventArrivedEventArgs.Properties.Get_Item(PropertySqlColumnId).ToString())-1;
                    str parameterValue = _eventArrivedEventArgs.Properties.Get_Item(PropertySqlBindVarValue);
                    if (bindValues.ContainsKey(columnId))
                    {
                        bindValues.Clear();
                    }
                    bindValues.Add(columnId, parameterValue);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEtlFileName</Name>
				<Source><![CDATA[
    public str getEtlFileName()
    {
        return etlFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>import</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void import()
    {
        if (isRunning)
        {
            this.stop();
        }

        if (etlFileName)
        {
            
            AxTraceEventFactory::PrepareProivdersMap();

            using (var watcher = new EventTraceWatcher())
            {
                watcher.EventArrived += eventhandler(this.parseEtlRow);
                try
                {
                    watcher.ProcessTrace(etlFileName);
                }
                finally
                {
                    watcher.EventArrived -= eventhandler(this.parseEtlRow);
                }
            }
           
            imported = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>awaitTraceParser</Name>
				<Source><![CDATA[
    private void awaitTraceParser()
    {
        infolog.yield();
        sleep(5000);
        infolog.yield();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlStatementsWithParameterValues</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Map sqlStatementsWithParameterValues()
    {
        return sqlStatementsWithValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlStatements</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Map sqlStatements()
    {
        if (!imported)
        {
            this.import();
        }
        
        return sqlStatements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlStatementsMetadata</Name>
				<Source><![CDATA[
    internal Map sqlStatementsMetadata()
    {
        if (!imported)
        {
            this.import();
        }

        return sqlStatementsMetadata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void Dispose()
    {
        if (isRunning)
        {
            SysTraceController::cancelTrace(traceName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTraceName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    static internal MXTXppInterpreterTraceParser newFromTraceName(str _traceName)
    {
        Debug::assert(_traceName != '');

        MXTXppInterpreterTraceParser traceParser = new MXTXppInterpreterTraceParser();
        traceParser.traceName = _traceName;

        return traceParser;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>