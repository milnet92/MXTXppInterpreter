<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MXTXppScriptTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MXTXppScriptTemplate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static MXTXppScriptTemplate find(MXTTemplateId _templateId, boolean _forUpdate = false)
    {
        MXTXppScriptTemplate template;

        if (_templateId)
        {
            select firstonly template
                index TemplateIdx
                where template.TemplateId == _templateId;

            if (_forUpdate)
            {
                template.selectForUpdate(true);
            }
        }

        return template;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(MXTTemplateId _templateId)
    {
        if (_templateId)
        {
            return (select firstonly RecId from MXTXppScriptTemplate
                        index TemplateIdx
                        where MXTXppScriptTemplate.TemplateId == _templateId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTemplateMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static MXTSourceCode applyTemplateMap(MXTTemplateId _templateId, MXTXppTmpScriptTemplateMap _mapping)
    {
        MXTXppScriptTemplate template = MXTXppScriptTemplate::find(_templateId);
        MXTSourceCode        sourceCode = template.SourceCode;

        if (template)
        {
            while select _mapping
            {
                sourceCode = strReplace(sourceCode, _mapping.Placeholder, _mapping.Value);
            }
        }

        return sourceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTemplateFromEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static MXTSourceCode generateTemplateFromEventHandler(MXTXppEventHandlerTable _eventHandler)
    {
        MXTSourceCode code = @"void %1(%2)
{

}
";

        System.Type elementType = _eventHandler.getElementType();
        if (elementType == null)
        {
            throw error(strFmt("Invalid element name %1", _eventHandler.ElementName));
        }

        System.Type delegateType = _eventHandler.getDelegateType();
        if (delegateType == null)
        {
            throw error(strFmt("Invalid method name %1", _eventHandler.MethodName));
        }

        System.Type[] types = XppInterpreter.Interpreter.Bytecode.Events.DelegateHelper::GetDelegateParameterTypes(delegateType);

        str parameterCode = "";
        for (int i = 0; i < types.Length; i++)
        {
            System.Type parameterType = types.Get(i);

            if (i != 0)
            {
                parameterCode += ", ";
            }

            parameterCode += parameterType.Name;
            parameterCode += ' ';
            parameterCode += strFmt("_parm%1", i + 1);
        }

        code = strFmt(code, _eventHandler.DisplayMethodName, parameterCode);

        return code;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>MXTXppScriptTemplateMap</Name>
			<Relation>MXTXppScriptTemplate</Relation>
			<Table>MXTXppScriptTemplateMap</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TemplateId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>MXTTemplateId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceCode</Name>
			<ExtendedDataType>MXTSourceCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description255</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TemplateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TemplateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>