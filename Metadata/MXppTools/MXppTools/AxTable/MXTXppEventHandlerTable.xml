<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MXTXppEventHandlerTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MXTXppEventHandlerTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void initValue()
    {
        super();

        this.Active = NoYes::No;
        this.ElementType = MXTXppEventElementType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableIdFromElementType</Name>
				<Source><![CDATA[
    private static TableId getTableIdFromElementType(MXTXppEventElementType _elementType)
    {
        switch (_elementType)
        {
            case MXTXppEventElementType::Class: return tableNum(SysMetaClassNameLookup);
            case MXTXppEventElementType::Table: return tableNum(SysMetaTableNameLookup);
            case MXTXppEventElementType::Form: return tableNum(SysMetaFormNameLookup);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performElementNameLookup</Name>
				<Source><![CDATA[
    public static void performElementNameLookup(MXTXppEventElementType _elementType, FormControl _control)
    {
        TableId tableId = MXTXppEventHandlerTable::getTableIdFromElementType(_elementType);
        
        if (!tableId) return;
        
        SysTableLookup sysLookup = SysTableLookup::newParameters(tableId, _control);

        sysLookup.addLookupfield(fieldName2Id(tableId, "Name"));

        sysLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>internalEventToDisplayName</Name>
				<Source><![CDATA[
    public static MethodName internalEventToDisplayName(MethodName _methodName)
    {
        return strReplace(_methodName, '$', '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNameToInternalEvent</Name>
				<Source><![CDATA[
    public MethodName displayNameToInternalEvent()
    {
        System.Type type = this.getElementType();

        if (strContains(this.DisplayMethodName, "_PreDelegate") || strContains(this.DisplayMethodName, "_PostDelegate"))
            return '$' + this.DisplayMethodName;

        return this.DisplayMethodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventHandlerType</Name>
				<Source><![CDATA[
    public static MXTXppEventHandlerType getEventHandlerType(MXTXppEventElementType _elementType, SysElementName _elementName, SysMethodName _methodName)
    {
        if (strStartsWith(_methodName, "$") && strContains(_methodName, "_PreDelegate"))
            return MXTXppEventHandlerType::Pre;
        else if (strStartsWith(_methodName, "$") && strContains(_methodName, "_PostDelegate"))
            return MXTXppEventHandlerType::Post;

        System.Type type = MXTXppEventHandlerTable::getTypeFromElement(_elementType, _elementName);
        
        if (_elementType == MXTXppEventElementType::Table && XppInterpreter.Core.ReflectionHelper::GetEvent(type, _methodName) != null)
            return MXTXppEventHandlerType::DataEvent;
        else 
            return MXTXppEventHandlerType::Static;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTypeFromElement</Name>
				<Source><![CDATA[
    public static System.Type getTypeFromElement(MXTXppEventElementType _elementType, SysElementName _elementName)
    {
        if (_elementType == MXTXppEventElementType::Form)
        {
            return MXTXppCastingProxy::getFormType(_elementName);
        }
        else
        {
            return MXTXppCastingProxy::getClrTypeFromTypeName(_elementName);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMethodNameLookup</Name>
				<Source><![CDATA[
    public static void performMethodNameLookup(MXTXppEventElementType _elementType, SysElementName _elementName, FormControl _control)
    {
        System.Type type = MXTXppEventHandlerTable::getTypeFromElement(_elementType, _elementName);
        MXTXppEventHandlerMethodTmp tmp;

        if (type != null)
        {
            // Static field delegates (methods)
            System.String[] fields = XppInterpreter.Interpreter.Bytecode.Events.DelegateHelper::GetDelegateFields(type);

            for (int i = 0; i < fields.Length; i++)
            {
                str name = fields.Get(i);
                tmp.EventHandlerType = MXTXppEventHandlerTable::getEventHandlerType(_elementType, _elementName, name);
                tmp.MethodName = tmp.isPrePost() ? MXTXppEventHandlerTable::internalEventToDisplayName(name) : name;
                tmp.insert();
            }

            // Events
            if (_elementType == MXTXppEventElementType::Table)
            {
                System.String[] events = XppInterpreter.Interpreter.Bytecode.Events.DelegateHelper::GetEventNames(type);
                
                for (int i = 0; i < events.Length; i++)
                {
                    str name = events.Get(i);
                    tmp.MethodName = name;
                    tmp.EventHandlerType = MXTXppEventHandlerType::DataEvent;
                    tmp.insert();
                }
            }
        }

        SysTableLookup          tableLookup = SysTableLookup::newParameters(tableNum(MXTXppEventHandlerMethodTmp), _control);
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tablenum(MXTXppEventHandlerMethodTmp));
        tableLookup.addLookupfield(fieldnum(MXTXppEventHandlerMethodTmp, MethodName), true);
        tableLookup.addLookupfield(fieldNum(MXTXppEventHandlerMethodTmp,EventHandlerType));

        tableLookup.parmQuery(query);
        tableLookup.parmTmpBuffer(tmp);
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void setActive()
    {
        this.ActivatedBy = curUserId();
        this.ActivationDateTime = DateTimeUtil::getSystemDateTime();
        this.Active = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInactive</Name>
				<Source><![CDATA[
    public void setInactive()
    {
        this.ActivatedBy = '';
        this.ActivationDateTime = DateTimeUtil::minValue();
        this.Active = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();
    
        if (ret && this.Active)
        {
            ret = checkFailed("Cannot delete an Event handler in status Active. Deactivate it first.");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElementType</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public System.Type getElementType()
    {
        if (this.ElementName)
        {
            return this.ElementType == MXTXppEventElementType::Form ?
                MXTXppCastingProxy::getFormType(this.ElementName) :
                MXTXppCastingProxy::getClrTypeFromTypeName(this.ElementName);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDelegateType</Name>
				<Source><![CDATA[
    public System.Type getDelegateType()
    {
        if (this.HandlerType == MXTXppEventHandlerType::DataEvent)
        {
            return XppInterpreter.Core.ReflectionHelper::GetEvent(this.getElementType(), this.MethodName).EventHandlerType;
        }

        return XppInterpreter.Core.ReflectionHelper::GetField(this.getElementType(), this.MethodName).FieldType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void validate()
    {
        MXTXppEventHandlerManager manager = new MXTXppEventHandlerManager(this);
        manager.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeExists</Name>
				<Source><![CDATA[
    public static boolean activeExists(MXTXppEventHandlerTable _eventHandler)
    {
        return (select firstonly RecId from MXTXppEventHandlerTable
            where MXTXppEventHandlerTable.ElementType == _eventHandler.ElementType &&
                  MXTXppEventHandlerTable.ElementName == _eventHandler.ElementName &&
                  MXTXppEventHandlerTable.MethodName  == _eventHandler.MethodName &&
                  MXTXppEventHandlerTable.RecId       != _eventHandler.RecId &&
                  MXTXppEventHandlerTable.Active      == NoYes::Yes).RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@MXT:EventHandler</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Audit</Name>
			<Label>@MXT:Audit</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreatedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreatedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivationDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivatedBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@MXT:EventHandler</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ElementType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ElementName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayMethodName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MethodName</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>SysMethodName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@MXT:EventName</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ElementName</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>SysElementName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@MXT:ElementName</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ElementType</Name>
			<AllowEdit>No</AllowEdit>
			<Label>Element type</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>MXTXppEventElementType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HandlerSourceCode</Name>
			<ExtendedDataType>MXTSourceCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DisplayMethodName</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>SysMethodName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ActivationDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@SYS54971</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivatedBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ModifiedBy</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@MXT:ActivatedBy</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HandlerType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>MXTXppEventHandlerType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>